Many people have an awkward epiphany the first time they see " BYOB " emblazoned at the bottom of a party invitation . Far from a typo , the common abbreviation for " bring your own bottle " has been a staple of the American social scene for several decades . In the same way BYOB has influenced social circles , a new acronym has started to shape the way we work . BYOD -- short for " bring your own device " -- has become increasingly prevalent in modern enterprises . According to a Tech Pro Research study , 74 percent of organizations permit employees to bring their own electronic devices to work . By most accounts , it 's a positive trend for both businesses and employees . The policy allows companies to eliminate the expenses associated with purchasing and managing computers , tablets , or smartphones that employees might never use . Employees are often more productive and happy using their own devices because they 're already familiar with how they operate . The sudden surge of BYOD policies has created the need for enterprise - grade applications to work across a wide range of devices , ensuring security and productivity for workers and organizations alike . Affording employees more freedom and control over the devices they use for work is generally a prudent move . But considering the prevalence of new technologies and wearables , the apps of tomorrow must accommodate a wide range of platforms . Here are four elements business leaders and app developers should consider : This lets you identify users , monitor their connections , and restrict access . Multi - device apps require solid authentication , which could be accomplished via a username and password or through more advanced features , such as biometric fingerprints or a two - factor authentication code . This determines what a user can and can not see and do inside a system . This is where user privileges come in . Let 's say your app streams data from IoT sensors to an employee . An access manager API could allow you to grant and revoke permission to consume that data . It also could regulate which subsets of employees have access to certain data streams , restricting access when necessary . This is a necessity , as it allow you to provision and update a multi - device app across your entire ecosystem . These updates can be done on the fly in real time , eliminating the need for employees to install updates on their own . You could deploy an app - only management strategy , focusing on a single application and how you store and share sensitive data on devices . This approach leaves device management to the user , with firmware updates and provisioning handled via the application . This must occur across multi - device apps , and a user on multiple devices should see the same data in both places . This is achieved through two real - time designs : pub / sub and data sync . Pub / sub allows users to subscribe to a channel and receive published messages in real time . This bidirectional design makes it possible for streaming data to display on a real - time dashboard or for co - workers to collaborate in a chat app . Data sync , meanwhile , provides " state " data that is created , read , updated , and deleted . This data is persistent and kept in sync between clients and back - end processes . The cooperative structure of Google Docs is based on this element . Read more about startups and apps here on Tech . Co